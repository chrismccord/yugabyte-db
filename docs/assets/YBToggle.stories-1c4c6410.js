import{_ as $,a as f,j as l}from"./useTheme-ed20be1d.js";import{w as v,c as b,a as g}from"./capitalize-6c71ac81.js";import{_ as T}from"./extends-98964cd2.js";import{r as o}from"./index-f2bd0723.js";import"./index-e297e3bd.js";import{S as x,F as V}from"./FormControlLabel-80de5ea0.js";import{m as S}from"./makeStyles-e494f9a4.js";import{c as F}from"./createStyles-cfd966dc.js";import{F as P}from"./FormControl-630baca6.js";import{T as _}from"./Typography-ee7f0f8e.js";import"./_commonjsHelpers-042e6b4d.js";import"./assertThisInitialized-e784747a.js";import"./useFormControl-21824096.js";import"./IconButton-ce51819d.js";import"./ButtonBase-bbb043b6.js";import"./index-0a26bc51.js";import"./TransitionGroupContext-06ba0be2.js";import"./useIsFocusVisible-bfbe563c.js";var q=function(e){return{root:{display:"inline-flex",width:34+12*2,height:14+12*2,overflow:"hidden",padding:12,boxSizing:"border-box",position:"relative",flexShrink:0,zIndex:0,verticalAlign:"middle","@media print":{colorAdjust:"exact"}},edgeStart:{marginLeft:-8},edgeEnd:{marginRight:-8},switchBase:{position:"absolute",top:0,left:0,zIndex:1,color:e.palette.type==="light"?e.palette.grey[50]:e.palette.grey[400],transition:e.transitions.create(["left","transform"],{duration:e.transitions.duration.shortest}),"&$checked":{transform:"translateX(20px)"},"&$disabled":{color:e.palette.type==="light"?e.palette.grey[400]:e.palette.grey[800]},"&$checked + $track":{opacity:.5},"&$disabled + $track":{opacity:e.palette.type==="light"?.12:.1}},colorPrimary:{"&$checked":{color:e.palette.primary.main,"&:hover":{backgroundColor:f(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:e.palette.type==="light"?e.palette.grey[400]:e.palette.grey[800]},"&$checked + $track":{backgroundColor:e.palette.primary.main},"&$disabled + $track":{backgroundColor:e.palette.type==="light"?e.palette.common.black:e.palette.common.white}},colorSecondary:{"&$checked":{color:e.palette.secondary.main,"&:hover":{backgroundColor:f(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:e.palette.type==="light"?e.palette.grey[400]:e.palette.grey[800]},"&$checked + $track":{backgroundColor:e.palette.secondary.main},"&$disabled + $track":{backgroundColor:e.palette.type==="light"?e.palette.common.black:e.palette.common.white}},sizeSmall:{width:40,height:24,padding:7,"& $thumb":{width:16,height:16},"& $switchBase":{padding:4,"&$checked":{transform:"translateX(16px)"}}},checked:{},disabled:{},input:{left:"-100%",width:"300%"},thumb:{boxShadow:e.shadows[1],backgroundColor:"currentColor",width:20,height:20,borderRadius:"50%"},track:{height:"100%",width:"100%",borderRadius:14/2,zIndex:-1,transition:e.transitions.create(["opacity","background-color"],{duration:e.transitions.duration.shortest}),backgroundColor:e.palette.type==="light"?e.palette.common.black:e.palette.common.white,opacity:e.palette.type==="light"?.38:.3}}},B=o.forwardRef(function(e,i){var a=e.classes,n=e.className,c=e.color,w=c===void 0?"secondary":c,p=e.edge,C=p===void 0?!1:p,d=e.size,u=d===void 0?"medium":d,R=$(e,["classes","className","color","edge","size"]),m=o.createElement("span",{className:a.thumb});return o.createElement("span",{className:b(a.root,n,{start:a.edgeStart,end:a.edgeEnd}[C],u==="small"&&a["size".concat(g(u))])},o.createElement(x,T({type:"checkbox",icon:m,checkedIcon:m,classes:{root:b(a.switchBase,a["color".concat(g(w))]),input:a.input,checked:a.checked,disabled:a.disabled},ref:i},R)),o.createElement("span",{className:a.track}))});const I=v(q,{name:"MuiSwitch"})(B),z=v(t=>F({root:{width:42,height:24,marginRight:8,padding:0,overflow:"visible",display:"flex"},switchBase:{padding:`${t.spacing(.5)}px !important`,color:t.palette.common.white,"&$checked":{transform:"translateX(17px)",color:t.palette.common.white,"& + $track":{opacity:1,backgroundColor:t.palette.orange[500],borderColor:t.palette.orange[500]}}},thumb:{width:16,height:16,boxShadow:"none",color:t.palette.common.white},track:{border:`1px solid ${t.palette.grey[500]}`,borderRadius:22/2,opacity:1,backgroundColor:t.palette.grey[500]},checked:{}}))(I),E=S(t=>({root:{marginLeft:0},label:{...t.typography.body2}})),s=({label:t,labelVariant:e,FormControlProps:i,...a})=>{const n=E();return l(P,{...i,children:l(V,{control:l(z,{color:"primary",...a}),labelPlacement:"end",label:l(_,{variant:e??"body2",children:t}),classes:n})})};try{s.displayName="YBToggle",s.__docgenInfo={description:"",displayName:"YBToggle",props:{label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},labelVariant:{defaultValue:null,description:"",name:"labelVariant",required:!1,type:{name:"enum",value:[{value:'"button"'},{value:'"caption"'},{value:'"h1"'},{value:'"h2"'},{value:'"h3"'},{value:'"h4"'},{value:'"h5"'},{value:'"h6"'},{value:'"subtitle1"'},{value:'"subtitle2"'},{value:'"body1"'},{value:'"body2"'},{value:'"overline"'}]}},FormControlProps:{defaultValue:null,description:"",name:"FormControlProps",required:!1,type:{name:"ToggleFormControlProps"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"((instance: HTMLButtonElement | null) => void) | RefObject<HTMLButtonElement> | null"}},disableFocusRipple:{defaultValue:null,description:"",name:"disableFocusRipple",required:!1,type:{name:"boolean"}},edge:{defaultValue:null,description:`If given, uses a negative margin to counteract the padding on one
side (this is often helpful for aligning the left or right
side of the icon with content above or below, without ruining the border
size and shape).`,name:"edge",required:!1,type:{name:'false | "start" | "end"'}},action:{defaultValue:null,description:"A ref for imperative actions.\nIt currently only supports `focusVisible()` action.",name:"action",required:!1,type:{name:"Ref<ButtonBaseActions>"}},buttonRef:{defaultValue:null,description:"@ignore Use that prop to pass a ref to the native button component.\n@deprecated Use `ref` instead.",name:"buttonRef",required:!1,type:{name:"Ref<unknown>"}},centerRipple:{defaultValue:null,description:"If `true`, the ripples will be centered.\nThey won't start at the cursor interaction position.",name:"centerRipple",required:!1,type:{name:"boolean"}},disableTouchRipple:{defaultValue:null,description:"If `true`, the touch ripple effect will be disabled.",name:"disableTouchRipple",required:!1,type:{name:"boolean"}},focusRipple:{defaultValue:null,description:"If `true`, the base button will have a keyboard focus ripple.",name:"focusRipple",required:!1,type:{name:"boolean"}},focusVisibleClassName:{defaultValue:null,description:`This prop can help identify which element has keyboard focus.
The class name will be applied when the element gains the focus through keyboard interaction.
It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).
A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a \`focus-visible\` class to other components
if needed.`,name:"focusVisibleClassName",required:!1,type:{name:"string"}},onFocusVisible:{defaultValue:null,description:"Callback fired when the component is focused with a keyboard.\nWe trigger a `onFocus` callback too.",name:"onFocusVisible",required:!1,type:{name:"FocusEventHandler<any>"}},TouchRippleProps:{defaultValue:null,description:"Props applied to the `TouchRipple` element.",name:"TouchRippleProps",required:!1,type:{name:"Partial<TouchRippleProps>"}}}}}catch{}const te={title:"Components/YBToggle",component:s,tags:["autodocs"],parameters:{controls:{exclude:["action","focusVisibleClassName","FormControlProps","inputProps","onFocusVisible","ref","TouchRippleProps"],sort:"alpha"}}},r={args:{disabled:!1,centerRipple:!1,label:"Test",disableFocusRipple:!1,disableTouchRipple:!1}};var h,y,k;r.parameters={...r.parameters,docs:{...(h=r.parameters)==null?void 0:h.docs,source:{originalSource:`{
  // More on args: https://storybook.js.org/docs/react/writing-stories/args
  args: {
    disabled: false,
    centerRipple: false,
    label: 'Test',
    disableFocusRipple: false,
    disableTouchRipple: false
  }
}`,...(k=(y=r.parameters)==null?void 0:y.docs)==null?void 0:k.source}}};const ae=["Toggle"];export{r as Toggle,ae as __namedExportsOrder,te as default};
//# sourceMappingURL=YBToggle.stories-1c4c6410.js.map
